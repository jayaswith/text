using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace ConsoleApplication1
{
    class Program
    {
       public static void Main(string[] args)
        {
              string value = "20/02/2019";
             string dateFormat = "MMM dd YYYY";
            CheckAndConvertToDate(value, dateFormat);
        }

      

        public static void CheckAndConvertToDate(string value, string dateFormat)
        {
            bool success = false;
            string cases = dateFormat; string Outputdate = "";
            DateTime date;
            try
            {
                switch (cases)
                {
                    case "dd/MM/yyyy":


                        Regex regex1 = new Regex(@"((0[1-9]|[12]\d|3[01])[- /.](0[1-9]|1[0-2])[- /.]([12]\d{3})$");
                        if (regex1.IsMatch(value))
                        {
                            date = DateTime.ParseExact(value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            Outputdate = date.ToString("dd/MM/yyyy").Replace('-', '/');
                            success = true;
                        }

                        break;
                    case "MM/dd/yyyy":

                        Regex regex2 = new Regex(@"((0[1-9]|1[0-2])[- /.](0[1-9]|[12]\d|3[01])[- /.]([12]\d{3}))$");
         a               if (regex2.IsMatch(value))
                        {
                            date = DateTime.ParseExact(value, "MM/dd/yyyy", CultureInfo.InvariantCulture);
                            Outputdate = date.ToString("dd/MM/yyyy").Replace('-', '/');
                            success = true;
                        }

                        break;
                    case "d/M/yyyy":

                        Regex regex3 = new Regex(@"(([1-9])[- /.]([1-9])[- /.]([12]\d{3}))$");
                        if (regex3.IsMatch(value))
                        {
                            date = DateTime.ParseExact(value, "d/M/yyyy", CultureInfo.InvariantCulture);
                            Outputdate = date.ToString("dd/MM/yyyy").Replace('-', '/');
                            success = true;
                        }

                        break;
                    case "d/MMM/yyyy":

                        Regex regex4 = new Regex(@"(([1-9])[- /.]([Jj][Aa][Nn]|[Ff][Ee][Bb]|[Mm][Aa][Rr]|[Aa][Pp][Rr]|[Mm][Aa][Yy]|[Jj][Uu][Nn]|[Jj][Uu][Lj]|[Aa][Uu][Gg]|[Ss][Ee][Pp]|[Oo][Cc][Tt]|[Nn][Oo][Vv]|[Dd][Ee][Cc])[- /.]([12]\d{3}))$");
                        if (regex4.IsMatch(value))
                        {
                            date = DateTime.ParseExact(value, "d/MMM/yyyy", CultureInfo.InvariantCulture);
                            Outputdate = date.ToString("dd/MM/yyyy").Replace('-', '/');
                            success = true;
                        }
                        break;
                    case "MMM dd YYYY":

                        Regex regex5 = new Regex(@"(([Jj][Aa][Nn]|[Ff][Ee][Bb]|[Mm][Aa][Rr]|[Aa][Pp][Rr]|[Mm][Aa][Yy]|[Jj][Uu][Nn]|[Jj][Uu][Lj]|[Aa][Uu][Gg]|[Ss][Ee][Pp]|[Oo][Cc][Tt]|[Nn][Oo][Vv]|[Dd][Ee][Cc])[\/. -](0[1-9]|[12]\d|3[01])[\/. -]([12]\d{3}))$");
                        if (regex5.IsMatch(value))
                        {
                            date = Convert.ToDateTime(value);                     
                            Outputdate = date.ToString("dd/MM/yyyy").Replace('-', '/');
                            success = true;
                        }

                        break;
                    default:
                        Outputdate = "";
                        success = false;
                        Console.WriteLine("Nothing is converted");
                        break;
                }
               
                Console.WriteLine(" Result Date Value is :- '" + success + "'");
                Console.WriteLine(" Result Date Value is :- '" + Outputdate + "'");
                
            }
            catch (Exception ex)
            {

            }


            Console.ReadKey();
        }

    }
}
